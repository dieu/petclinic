launch:
    parameters:
        - app-tier-size:
            description: Number of servers in app tier
            default: 1
            min: 1
            max: 20
        - app-fork: &app-fork
            description: Source control fork
            default: "dieu"
        - app-branch: &app-branch
            description: Source control branch
            default: "HEAD"
    steps:
        - db-tier:
            action: .compute.grow
            parameters:
                roleName: db-node
            output:
                 db-hosts: ips

        - app-tier:
            action: .compute.grow
            parameters:
                roleName: app-node
                quantity: ${app-tier-size}
            output:
                app-hosts: ips

        - lb-tier:
            action: .compute.grow
            parameters:
                roleName: lb-node
            output:
                lb-hosts: ips

        - database:
            action: .deploy.db
            precedingPhases: [ provision ]
            phase: deploy-db
            parameters:
              app-fork: ${app-fork}
              app-branch: ${app-branch}

        - lb-install:
            action: "chefrun"
            precedingPhases: [ deploy-db ]
            phase: install-lb
            parameters:
              roles: [ lb-node ]
              runList: ["recipe[haproxy]"]
              isSolo: true
              recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"

        - app:
            action: .install.app
            precedingPhases: [ install-lb ]
            phase: deploy-app
            parameters:
              db-hosts: ${db-hosts}
              app-hosts: ${app-hosts}
              app-fork: ${app-fork}
              app-branch: ${app-branch}

    return:
        db-hosts:
            description: Database IP address
            value: ${db-hosts}
        app-hosts:
            description: Application IP address
            value: ${app-hosts}
        lb-hosts:
            description: Loab Balancer IP address
            value: ${lb-hosts}
        app-url:
            description: Url to the application
            value: "http://{$.lb-tier~hosts[0]}"
        haproxy-url:
            description: Url to haproxy stats
            value: "http://{$.lb-tier~hosts[0]}:22002/"

scale-up:
    parameters:
        - app-count:
            description: Additional servers in app tier
            default: 1
            min: 1
            max: 20
        - app-fork: *app-fork
        - app-branch: *app-branch

    steps:
        - app-tier:
            action: .compute.grow
            parameters:
                roleName: app-node
                quantity: ${app-count}
            output:
                app-hosts: ips

        - app:
            action: .install.app
            precedingPhases: [ provision ]
            phase: deploy-app
            parameters:
              db-hosts: ${db-hosts}
              app-hosts: ${app-hosts}
              app-fork: ${app-fork}
              app-branch: ${app-branch}

    return:
        app-hosts:
            description: Application IP address
            value: ${app-hosts}

scale-down:
    parameters:
        - app-count:
            description: Number of app tier servers to remove
            default: 1
            min: 1
            max: 20
    steps:
        - shrink-app-tier:
            action: "destroyVms"
            parameters:
              phase: "destroy"
              roleName: app-node
              quantity: ${app-count}

        - setup-lb:
            action: .setup.lb
            precedingPhases: [ destroy ]
            phase: setup-lb
            parameters:
               app-hosts: ${app-hosts}

    return:
        app-hosts:
            description: Application IP address
            value: ${app-hosts}


update:
    parameters:
        - app-fork: *app-fork
        - app-branch: *app-branch

    steps:
        - update-app:
            action: .deploy.app
            parameters:
              db-hosts: ${db-hosts}
              app-fork: ${app-fork}
              app-branch: ${app-branch}

destroy:
    steps:
        - destroy:
            action: compute.shrink-all


.compute.grow:
  parameters:
    - phase:
        default: provision
    - roleName:
        default: defaultRole
    - quantity:
        default: 1
    - identity:
        default: undefined
    - credential:
        default: undefined
  steps:
    provision-vms:
      action: "provisionVms"
      parameters:
         phase: ${phase}
         roleName: ${roleName}
         hardwareId: m1.small
         quantity: ${quantity}
         retryCount: 1
         jcloudsProvider: aws-ec2
         jcloudsEndpoint: https://ec2.us-east-1.amazonaws.com
         jcloudsRegions: us-east-1
         jcloudsNodeNamePrefix: petclinic
         jcloudsIdentity: ${identity}
         jcloudsCredential: ${credential}
         vmIdentity: ubuntu
         imageId: us-east-1/ami-0fac7566
         ec2SecurityGroup: default
      output:
         hosts: ips
  return:
    ips:
      value: ${hosts}

.deploy.db:
  parameters:
    - app-fork: *app-fork
    - app-branch: *app-branch
  steps:
    - install-database:
        action: "chefrun"
        phase: install-db
        parameters:
          roles: [ db-node ]
          runList: ["recipe[mysql::server]"]
          isSolo: true
          recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"
          jattrs:
              mysql:
                server_root_password: e653e94ee8d064ec95ef5a1381c87a23
                server_repl_password: e653e94ee8d064ec95ef5a1381c87a23
                server_debian_password: e653e94ee8d064ec95ef5a1381c87a23

    - deploy-database:
        action: "chefrun"
        phase: deploy-db
        precedingPhases: [ install-db ]
        parameters:
          roles: [ db-node ]
          runList: ["recipe[war::mysql]"]
          isSolo: true
          recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"
          jattrs:
              database:
                name: "petclinic"
                schema: "https://raw.github.com/${app-fork}/petclinic/${app-branch}/src/main/resources/db/mysql/petclinic-mysql-schema.sql"
                data:   "https://raw.github.com/${app-fork}/petclinic/${app-branch}/src/main/resources/db/mysql/petclinic-mysql-dataload.sql"

.deploy.app:
  parameters:
    - db-hosts:
        description: Database IP address
    - app-fork: *app-fork
    - app-branch: *app-branch
  steps:
    - deploy-app:
        action: "chefrun"
        phase: deploy-app
        parameters:
          roles: [ app-node ]
          runList: ["recipe[war]"]
          isSolo: true
          recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"
          jattrs:
            war:
              deploy:
                git:
                  url: git://github.com/${app-fork}/petclinic.git
                  revision: ${app-branch}

    - configure-datasource:
        action: "chefrun"
        phase: configure-app
        precedingPhases: [ deploy-app ]
        parameters:
          roles: [ app-node ]
          runList: ["recipe[war::configure]"]
          isSolo: true
          recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"
          jattrs:
            configure:
              source: "https://raw.github.com/${app-fork}/petclinic/${app-branch}/src/main/resources/db/mysql/petclinic-database.properties.erb"
              to: "classes/jdbc.properties"
              variables:
                hosts: ${db-hosts}
                database: "petclinic"

.setup.lb:
  parameters:
    - app-hosts:
        description: Application IP address
  steps:
    - setup-lb:
        action: "chefrun"
        parameters:
          roles: [ lb-node ]
          runList: ["recipe[war::lb]"]
          isSolo: true
          recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"
          jattrs:
            haproxy.rebalance:
              nodes: ${app-hosts}

.install.app:
  parameters:
    - db-hosts:
        description: Database IP address
    - app-hosts:
        description: Application IP address
    - app-fork: *app-fork
    - app-branch: *app-branch
  steps:
    - install-app:
        action: "chefrun"
        phase: install-app
        parameters:
          roles: [ app-node ]
          runList: ["recipe[tomcat]"]
          isSolo: true
          recipeUrl: "https://github.com/cometera/cookbooks/raw/0.1/cookbooks.tar.gz"

    - deploy:
        action: .deploy.app
        phase: deploy-app
        precedingPhases: [ install-app ]
        parameters:
          db-hosts: ${db-hosts}
          app-fork: ${app-fork}
          app-branch: ${app-branch}

    - setup-lb:
        action: .setup.lb
        precedingPhases: [ deploy-app ]
        phase: setup-lb
        parameters:
          app-hosts: ${app-hosts}


# =========== TESTING ==========
test:
    parameters:
        - flavour: &flavour
            description: ami-flavour
            default: ubuntu10
        - app-fork: *app-fork
        - app-branch: *app-branch
        - grid-remote:
            description: Selenium Grid
            default: x.x.x.x:4444
    steps:
        - ume:
            action: _undeployme
            phase: injection
            output:
                entry: entry
                auth: auth
                appId: appId
                orgId: orgId
                envId: envId
        - rest-call:
            action: restcall
            precedingPhases: [ injection ]
            parameters:
                roles: [any]
                command: "{$.entry}api/1/applications/{$.appId}/launch"
                method: POST
                body: 
                    ! 
                        '{{
                          "environmentId": "{$.envId}",
                          "instanceName": "Petclinic-tester {$.flavour}",
                          "destroyInterval": "3600000",
                          "base-url": "{$.app-url}",
                          "grid-remote": "{$.grid-remote}",
                          "app-fork": "{$.app-fork}",
                          "app-branch": "{$.app-branch}",
                          "flavour": "{$.flavour}"
                        }}'
                acceptAllCertificates: true
                auth: "{$.auth}"
                contentType: application/json
                headers:
                    Content-Type: application/json
            output:
                content: content
    return:
        tester.url:
            description: Url of tester instance
            value:
                api: "{$.entry}api/1/instances/{$.content.id}"
                gui: "{$.entry}organizations/{$.orgId}/instances/{$.content.id}"

retest:
    parameters:
        - flavour: *flavour
        - app-fork: *app-fork
        - app-branch: *app-branch
    steps:
        - ume:
            action: _undeployme
            phase: injection
            output:
                entry: entry
                auth: auth
                instanceId: instanceId
        - rest-call:
            action: restcall
            precedingPhases: [ injection ]
            parameters:
                roles: [any]
                command: "{$.entry}api/1/instances/{$.instanceId}/retest"
                method: POST
                body: 
                    ! 
                        '{{
                          "base-url": "{$.app-url}",
                          "app-fork": "{$.app-fork}",
                          "app-branch": "{$.app-branch}",
                          "flavour": "{$.flavour}"
                        }}'
                acceptAllCertificates: true
                auth: "{$.auth}"
                headers:
                    Content-Type: application/json
            output:
                content: content
    return:
        tester.url:
            description: Url of tester instance
            value:
                api: "{$.entry}api/1/instances/{$.instanceId}"
                gui: "{$.entry}organizations/{$.orgId}/instances/{$.instanceId}"
        

#this workflow bypass common parameters
_undeployme:
    parameters:
        - settings:
            description: bunch of settings
    steps: []
    return:
        - entry:
            value: "{$.settings.entry}"
        - appId:
            value: "{$.settings.appId}"
        - orgId:
            value: "{$.settings.orgId}"
        - envId:
            value: "{$.settings.envId}"
        - instanceId:
            value: "{$.settings.instanceId}"
        - auth:
            value: "{$.settings.auth}"
